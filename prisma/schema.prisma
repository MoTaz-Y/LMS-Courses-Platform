generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id 
  email         String  
  emailVerified Boolean 
  name          String
  image         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  sessions      Session[]
  account       Account[]
  Courses       Course[]
  
  @@unique([email])
  @@map("user")
}

model Session {
  id           String      @id 
  userId       String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  token        String
  ipAddress    String
  userAgent    String
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([token])
  @@map("session")
}

model Account {
  id           String      @id 
  accountId    String
  providerId   String
  userId       String
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope        String?
  password     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("account")
}

model Verification {
  id           String      @id
  identifier   String
  value        String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("verification")
}

model Course {
  id           String      @id @default(uuid())
  title        String
  description  String
  fileKey      String
  price        Int
  duration     Int
  level        CourseLevel @default(BEGINNER)
  image        String
  category     String
  smallDescription  String
  slug         String
  status       CourseStatus @default(DRAFT)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("course")
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}
enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}